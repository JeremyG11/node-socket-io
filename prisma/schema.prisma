 
datasource db {
  url      = env("DATABASE_URL")
  provider = "mongodb"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  imageUrl String? @db.String
  email String @db.String @unique
  password String? @db.String

  sessions Session []

  asInitiator Conversation[] @relation("userProfileOne")
  asCorrespondent Conversation[] @relation("userProfileTwo")

  message Message []

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  valid     Boolean     @default(true)
  userAgent String

  userId    String      @db.ObjectId
  user      User        @relation(fields: [userId], references: [id], onDelete:Cascade)
  
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt 

  @@map("sessions")
  @@unique([userId])

}


model Conversation {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userProfileOneId String @db.ObjectId
  userProfileOne User @relation("userProfileOne", fields: [userProfileOneId], references: [id], onDelete: Cascade)

  userProfileTwoId String @db.ObjectId
  userProfileTwo User @relation("userProfileTwo", fields: [userProfileOneId], references: [id], onDelete: Cascade)

  messages Message[]

  @@unique([userProfileOneId, userProfileTwoId])
}

model Message {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  content String @db.String
  fileUrl String? @db.String

  conversationId String? @db.ObjectId
  conversation Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  senderId String @db.ObjectId
  senderProfile User @relation(fields: [senderId], references: [id], onDelete:Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([conversationId])
}
